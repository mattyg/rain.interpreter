// SPDX-License-Identifier: CAL
pragma solidity ^0.8.18;

import "forge-std/Test.sol";

import "src/lib/parse/LibParseMeta.sol";
import "test/lib/parse/LibBloom.sol";

contract LibParseMetaBuildMetaTest is Test {
    // function testBuildMeta0() external view {
    //     bytes32[] memory words = new bytes32[](2);
    //     words[0] = bytes32("a");
    //     words[1] = bytes32("b");
    //     bytes memory meta = LibParse.buildMeta(words, 0, 0x100);
    //     console2.logBytes(meta);
    // }

    // function testbuildMetaX() external {
    //     bytes32[] memory words = new bytes32[](2);
    //     words[0] = bytes32("a");
    //     words[1] = bytes32("b");
    //     assertEq(LibParse.buildMeta(words, 0, 0x100), LibParse.buildMetaSol(words));
    // }

    // function testBuildMeta1() external view {
    //     bytes32[] memory words = new bytes32[](70);
    //     for (uint256 i = 0; i < words.length; i++) {
    //         words[i] = bytes32(i);
    //     }
    //     bytes memory meta = LibParse.buildMeta(words, 0, 100000);
    //     console2.logBytes(meta);
    // }

    // function testBuildMetaY() external view {
    //     bytes32[] memory words = new bytes32[](170);
    //     for (uint256 i = 0; i < words.length; i++) {
    //         words[i] = bytes32(i);
    //     }
    //     bytes memory meta = LibParse.buildMetaSol2(words);
    //     console2.logBytes(meta);
    // }

    /// This is super loose from limited empirical testing.
    function expanderDepth(uint256 n) internal pure returns (uint8) {
        return uint8(n / type(uint256).max + 2);
    }

    function testBuildMetaExpander(bytes32[] memory words) external view {
        vm.assume(!LibBloom.bloomFindsDupes(words));
        bytes memory meta = LibParseMeta.buildMetaExpander(words, expanderDepth(words.length));
        (meta);
    }

    function testRoundMetaExpander(bytes32[] memory words, uint8 j, bytes32 notFound) external {
        vm.assume(words.length > 0);
        vm.assume(!LibBloom.bloomFindsDupes(words));
        for (uint256 i = 0; i < words.length; i++) {
            vm.assume(words[i] != notFound);
        }
        j = uint8(bound(j, uint8(0), uint8(words.length) - 1));

        bytes memory meta = LibParseMeta.buildMetaExpander(words, expanderDepth(words.length));
        (bool exists, uint256 k) = LibParseMeta.lookupIndexMetaExpander(meta, words[j]);
        assertTrue(exists);
        assertEq(j, k);

        (bool notExists, uint256 l) = LibParseMeta.lookupIndexMetaExpander(meta, notFound);
        assertTrue(!notExists);
        assertEq(0, l);
    }

    function testRoundMetaExpanderDeeper(bytes32[] memory words, uint8 j, bytes32 notFound) external {
        vm.assume(words.length > 50);
        vm.assume(!LibBloom.bloomFindsDupes(words));
        for (uint256 i = 0; i < words.length; i++) {
            vm.assume(words[i] != notFound);
        }
        j = uint8(bound(j, uint8(0), uint8(words.length) - 1));

        bytes memory meta = LibParseMeta.buildMetaExpander(words, expanderDepth(words.length));
        (bool exists, uint256 k) = LibParseMeta.lookupIndexMetaExpander(meta, words[j]);
        assertTrue(exists);
        assertEq(j, k);

        (bool notExists, uint256 l) = LibParseMeta.lookupIndexMetaExpander(meta, notFound);
        assertTrue(!notExists);
        assertEq(0, l);
    }

    function testRoundMetaExpanderRegression() external {
        // bytes32[130] memory wordsFixed = [bytes32(uint256(129)), 0x0001000000040f00340200000000006837090100003b00010000000200000004, 0x0000070000000000000000000000000000000900000000000000000000000000, 0x1f0d00000000000e00600000000000020000015400002800030317000000001c, 0x0000000204050000030001000000043d0c3001021807445200010020014d0000, 0x004a02278100018b021b6806081c4d065b000b1a0a05050b1c180a16090102a5, 0x005c000000000000060700000200001d0000000000000000520000001c000015, 0x1100040000000100000000000000000000000c005d0000180101000000001500, 0x0002000200000000000000000001010204000000001b2400001c1a0000000000, 0x00200e00000000000000000007000000001c0000000000000200000000000000, 0x000000000000000013000000000000000000000000000000190000000d000000, 0x041e000002000000000200000003000000040000110200000000000000000004, 0x000000000000000000000000000000000000000006000000000000001a070000, 0x00000001001f0000000000000000000000000000000003000000001900000000, 0x00000000000000000003000e0e00000000000000007908000000000000000000, 0x0500040569ae262401440300530e007b0311435c1000010a1905011d1a0e1c00, 0x050d35381c0019104d0c0601183f503b6f00094d3283a9443c02040b10290005, 0x0003041400043337330e0002000001011c020300000c0a0072686289dc64dc85, 0x730879266eb07e2ebdb9cbc0754fed5d43a2c9ba55767b8451eb16006d9c175a, 0x957c22ec3b144d099c52a6af18d700fef8663aee09099471c22a622c65a67582, 0xde7b51a67b5733f5c2b076097c11d76d3bb1b3329a4ef93c9f63f184879e56e4, 0x7509ac2990a2c5cc49ed628c77bc61ad123bcb7d1eb08f7612ddd39e6cce3f72, 0x160b9f8ae8344a8525b3501acffbb3b55ccf8e5b18371245517dc0cb111a4868, 0x263d514b76f3713f7c223be875adbf5cf77701d7018f31a429c2d2f42e82a147, 0x4299a3ce5925f884f1c42a112be0e92947041611d908b211ffef49783fdf5186, 0xae0fd8d1084fc50009fc6490a901b4a97686f8f3825717a2c5ebca40d14dd61a, 0xefb146e521fd6a87af167dc10acdb153f2eeeeff90a3446496dd6355b64b0bd7, 0x149a8768c082600776f9f8d8f6f0258c6358534382df062c3a2f9c9d0e8f6ff0, 0xc340389ff7028ed045beb2d0db262cd359b61776490799d44977a697e24db7eb, 0x9bf1b0ba12077a326e7fe363168e3527c7d2080ec052c9ac8de8c1a5f8df7516, 0x78ba4b3e74a10f87158ba2bb555d595570d65a062a3d89c744dc609911f41cc9, 0xd1eb900458634403933ca51a40fc572be7bab53639a91846735f2e6da61adac6, 0xb477711ad7aac0664931bcd260d7d68ac7355bb36cdf23829f55f000eff4add8, 0x525acf38809790e34557bb5743554067642f4840d632299c8a28c48002a97638, 0xcff03e35605f5d638a469ab976cbf73cbc1e29d06839b39e970aef57a98ddcf8, 0x688404b84e3812f9fb87fbd4957f296302200e2ca74ab0175e33bbbd7c6563bc, 0xbc78017abb2aaf403f13e198a4d0175ecda72f740830b32a94a8418aaf8154e9, 0xacad3d13ec936b8ba2b651ac07ec60c607a1e5cc2e63903234e7a6e3ab97ac64, 0xd91e19b0211914ab9ce26849d29cdaf37894615750f6a3e80e2436bbc6e4bd28, 0x0a00d0369e6771a46e63a5d90efb6d214f9522f848aacaff5eff54434071e26b, 0xccb995a884dd08b3b0542a216884826ada70f8191259d7af12212f938a13a23c, 0xdee0498c4773e8cc026cc44d264cb30a2e7ea5497b87d69b64ab854621441e05, 0x46ab2810862b8ca3dc50a93d3705082032a0bd1baffcae4bb6ea19b3efa247b5, 0xd68f9827087e7698785d0976d8e8570ecae664f7d5f88bcdbe50fb90733be4a5, 0x91ee3a3fabcdc21b6619d5841ebb8b999fc6f3f426676d6db41cda95cc436ab0, 0xc5f37299b33de4f75a37e21d037e71b06c214b4b28c57b36be77729637f8bf09, 0xb7f58451e9eb726ba6f37ec10d0a44f5dfc0437fa2e846f09f0a0f6b46429306, 0xcab3f7d5a3c7241d3bf37be65c58925c6496a7354faa0127732df697ffe87dd7, 0xe745c6b675d9cfad5e2af3b7a71a176055411d8d3632126f7190bb84cf96626f, 0x9dd0dee089f296da7334981d4b95f111ad8ed26100396fa43d53ca796a2efeb7, 0x8c7a49d365ac5daba482a7c70e96dd06551732be7b6c7db63f22d3fd579911d7, 0xd2ab8d45f47f1189a1acf2c6ac8c8d1aaaf249eb0ce2ffdd284df6447458f2a2, 0x42afafdba6095414cb29a7249e12b0fbfcecdaec75895bd6b14deba3aff2beec, 0x7a07a784af9f71d1b61fe81d2255b8d33039efcde6dafb5b84b52fd1c02f95a2, 0x81397cc8288e9b1f693be612d4285cb9ac332e2a4e8be60f24744718f088330e, 0x7f58104a994952d53f69c9ebb7343e8801a1e492c96228c3414d60d5da49ae73, 0x3854a1ac2acea614da7b4dad165a5f3a4ff9810c4f4320933fd9ba513e19986e, 0x64e52747ea925f1bd7aae9cc1c67a2ae46f10016d46d589289ef27c3d4d81fd7, 0xda3abc6d1d77399c67812fb0062df81da0dd8554eb1834feb47ae5c712b659dc, 0xf33f010d499178dafe68392dc0396b0519b9678618c87e3f303977c781273ae9, 0xcc79183c5a483a42dc870fdc27d4859d5f78797a3205770e759e2758b4da2fc4, 0x71785c818f67c0f5dda3a4c0980c5a636316636d93bf54719309e10e1cfe9338, 0x9045718b324498d18ba3895c5e3c2bbc7b0e74747c8ed59d4760694ee692f875, 0x88a19ec7ff16272fd73d133c1051d378da041a2f7350df2585ac1a539042cb10, 0xec40eae818a0df05b5c09ab189e7291de970ab285d48f82c513d7594c03b6b03, 0x9787c21439379b772b67b03e6e33f03671a4b3b72162a8614d86014db61f044d, 0x875a0b1f41f9aaa61204de30c245635bc0ad40277c5e0ac661f5e40a16488896, 0xb8c690dd09f656850f4e1f3ac6bb86a01ccdefcfe2c9d7e1c32e188204e22d9c, 0xc63178dcac539cbed0c4ff5902a58c2fd2cbacb6d6bfc9d07b55b324f4f33bfc, 0x883d6f379cce4fc5a94b65fce992abf9d681536d72132eee2db05fda110f37e8, 0xd507c723a2ed34aa3cbb1cdbb55bb0938d02e2c4c965140b93052e3dabf14b71, 0xbe0445af4dd7a8d047236458df1c653a17d1f9b9c62915b7e7c20986a2116e0c, 0x377833a75f42812973e7a07964e852d14edfea349341d21f21e92a1bee50ec26, 0x9269f27398d894f5430d2e3cdceeb600814b18a5384e8f95f67c14933b61a7f9, 0x831ef7c8e54cd90e88c569cd5f78cf84dff88fbd1bc88a34d6019b5da32f09d7, 0x92ccfa7b6f1416587493dcb13446736d812aecf3a5d8bd1168ec3711340a33f2, 0xcec528e0f580d997ca056aa90d4e4f58e869ea6895aba29a2b0c70e132d369c5, 0x529551b437200388d7c2ad2b8e161edd8c786a3402d4e4a4455609c96fe300dd, 0x388b3d67f8d32763f7d54b6922392025b02e44831cf65606a9eebca722a36383, 0x30ea005613ff9c252f5d30b877e7579180054b7670e2b9a6856315a1e178dcff, 0xee2ed7d697ee99b874eac0627ad6d2fdb36a437bd5ff4d89b5935f50fcd558a3, 0x38866b8692677bcd0264b514194a1b59905bf5ef63eb38c02e27b034cd17b844, 0x54c3e1bdb9f9e366b8b5d330a534bed0167cbb54df4dcc83e360d14c596fa3ee, 0xe132615f98e003ff56c1d3b08522f496555e1ffe5c34ec4a09b0664d69909dd9, 0x1359738f0396730b786817f049ecb4ac416ada9af71de8c90399eb0431af63dd, 0xf22c5befcc69dcf32b69e50114ebf639ffdff47df56b1ed49e6b288396f798e4, 0x7142c334f5e37e88efd80c55fe83dd245ea78d2fb7ef7510f1eaea5a5d0e5f35, 0x30291d296d3f7286f40bbde4c9983ce6079e16d1796f39c266caefb14ba9b1d2, 0x8ab55ff697b4dfb78ec31e42518e1a8e9fda422825b5d954a68815678926fa47, 0x808a9073dad7adea9e1ce7e8a9f028d3b88d7b0cb36053a111c9ed3b7c09ceae, 0xf767f751a81073c58f048990bbe605a58d5385c37d7f3902ed832a301fa22df8, 0x18d771352ae14337dc491b6f722524618ef48e85367da35a2c298730246d2906, 0xf5338d75968b3a3d49be44a9fd3cd9fd71e4b3af49b7e8af73e8760bd52bc183, 0x73c007aa1028016bc4ee4414861f089df2493dd9bf0d5d3bd418ed68c29f6f3d, 0xb658e3f7d58108fd0f65702c6a4f3ddc94aa49c8a21cc3ca3301360f4221cb6a, 0x8bf3b8eee77a662ab413f7537e5d47f0e04f2c5a260d23e462c75ca004700107, 0x5af0058aadb6dcd6b946ab8921aee45921c5dc2b7c03b10ced76af90e0e1b734, 0xba96bce37d11a78fa530dcfd0f6eb89225fcd609c2cfab8b179f33283699162f, 0x7ae0c66baad820e7b98603d93721c5dcbb69669a9bfea5978fa241cf08e2c074, 0xf3925c47ad3d2d8c140433a9008e423752c66bcf7732598ee74704bf47fde4ba, 0xa98872f773694a12b5a5c6fadec5f2d737fc9326cca576d10a1e18aeaffcd0c3, 0x729ae424b07e3c0d834d5d8a8a5db71efa5676062ed13baf8a4663a75aabe18c, 0x3473552ee2cd0525a708900ed012dc6530f923654188caf43b6800afd4f8ea39, 0x0d91039cc04d7accaba26fc1daa85a3f3547546bdf0cc1fc89144a88359da9e3, 0xecb8d07d60003b57d2a5ce4fe1e2e8d85bf22160843222e386f9fad479ecdd08, 0xbdc6dfc4059d7b4f7e5f3d75311c02fc659910fcb65194cfb06378ce889b5a5a, 0xb045540cac14e96374111cd381f9e05ae7db8efc3306917f251f0452c9f0740e, 0xdcb9df090b087d8d6c6c5120580dc59a2c4f7aa544dc39f949acdf4e1639b09f, 0x809d6a81c716e87ea22cde0b435106821b1335d47440913504f98084c5b397d3, 0x41cec953eb6fc1967144f8247ec6db943a61fc9e78a611cfc78860ca52de10be, 0x5a3a4457130e3dd41ce422ec975c50f9ed4bcbdf207ae276e0651d1b2561df7d, 0x9469c680bc1c5a3ca7036203333133729c888f595b18be446da19897f4875e21, 0x972da2c275a5b91f48d4f3ff6dbb55d7e3da5b8004e679835d4151f56b04852f, 0x5159a96fdd1e6e4726e16468a44a39fb805123d03839b056815a9264d0b04033, 0x41b9a70dd9108b55ec97b0a68ad83ad144a3fed3fafe7728fc04900531d35cde, 0x37d6b9f32f0b68a30a679218324434d329b721c7092e5281d745fb77887aa7d7, 0x90cb7162a7de0a8972bb892f37fffafb66c2e9cf1bdc45734028c910922d8879, 0x2306a75d569366796dbcf86b41f35d9334483898809dc1f5e70c30a46d9862e6, 0x71f5acfa7fb0bcd0242f1b098aff315eeefa89e62b1050bdb4e1750dae51d9e9, 0x74b25f78bf9acedd65202cd032a1f5f514422f3ba3bdf328175e375ca57c4437, 0x3328be493f5726b00e9e9a4582f1bf44878563de65bd74a069c861cbeeef234a, 0x3956202c355851db13afaccbaff52c1915966f6570be4059de017b167b48460b, 0x403b103c92af2fd3870202a69e360a42d6e9ec2f2646103a3e1488457bc59a1a, 0xa4f5916e4fdb8d15935b7ff836902ee6521f251ffa957fd44346cb2636f5302c, 0x7ce549f49fc5ad0a58ec1e35e1eb6667adcf1005953be4ee9047a99a91a903a1, 0x9a982eea7bcc51f214a2e47725c53b9fb20e5638f883ea4d252dad0cabf46114, 0x306500bfc46476c225cb15f555149e324902fd80d29e0a59df4b7504e1dad39d, 0xf8980a85868457973e2c8da10bc377f20bafb857f2d0a8d4e4d3547fdb295333, 0x0d6328ad415b6a26708b78e9cf164555632e507edcfcb9fdf44ab41b226ede4e, 0x80fdd04dfd55f8c23d0a6cb49ed2d44a8cb542934fa0a43705fdd0fb85b58fa0];
        // bytes32[] memory words;
        // assembly ("memory-safe") {
        //     words := wordsFixed
        // }

        uint256 j = 252;
        bytes32 notFound = 0x25178d9cf864546303c0b76ad4af39b490f80c625440490754799f548a7ffe6a;

        j %= 129;

        // bytes memory meta = LibParseMeta.buildMetaExpander(words, expanderDepth(words.length));
        // console2.logBytes(meta);
        bytes memory meta = hex"023b118d3ba01020abc189f6822b4f4afb519c274f2cee08404f1da1a4f00e4a1ea00200000000040004020110040480840000000001000001000800100000104020020001214ebc0500146e3432070019ff8bf809002da49cf50a00353a0cee0b00600a928d0c00259dbc4d11004fb023c0130054595790160028621ef0190029c6cd6b1a002608af1f1b002b73872c2400036b35b32500480f5b4c26006c4138832700723b317b2a0069f14e252d00391f82542f00330292c8300037556a7035003bd6c9223700498a0ebf38001ba6d1993a0040a8d1893b00451f6a223c002fc66b65400034edd78941007cafd6f3420068d3e6c643003a7d793146003d39b8634e00806c859b53004ad706bf59000457edc65a0053ba5d6a5b0077b9010f5d00363311635e0063b88e2f5f0022308f026200070c73eb63000655d23865001fb45aeb68005b1fbc4869000918ac6d6a00769201d66b000eac4c0b6e0061fdbd8270005241893d71001a0ebe1772004d78597775001763027f7a0059a130187b003870bc8a7c00753d15477f0031a8b0f8800030f68ae48400708cce0686001d755af788004e8e975989000d2a5c4b8b007f5f44608c007ee897828d0043701d648e005647558c8f003ca340f6910011699e13930015297aaf960044f1f2cb9800126608ea9900100e5e909a004c60878d9b000aec1d059e0062389c69a0005e9e3809a1006bd3e94ba30023784971a50055c3c728a9005c970534af003e35b200b10005d89b57b20027158727b4002c0d77c7b5002a13264cb60067c6a076b7002e862d12b8003fc34adebb00788ee024bf0032e7d8dec00020ce9646c60024c84147c7007deed4efc800021dba89c9004796325acb00004a0316cd001e44dceacf005111d59ed500664f6bdbdc005d0d33d6e50013f2ddf9e7005006b4d7e8000bd79fc4e9004b43cddceb000f052f3fec005fb10893ed00216c5ebcf0006d1e5395f2000ca06ce8f3006e425f2ff7004234a83df8006f867690fc0041cce87f01005a0784040d00738119191600748770e71c0065a36db4340018cf4dc0430057352a4a5000469e44c2680058098258920071bcd9ed97007af35ddd9f00643e0037a2001c6add3aaa00163d6a01b4007b724ae9b8007911e5bcc100085bd933ca006a107fb6da";
        (bool exists, uint256 k) = LibParseMeta.lookupIndexMetaExpander(meta, 0x7ce549f49fc5ad0a58ec1e35e1eb6667adcf1005953be4ee9047a99a91a903a1);
        // assertTrue(exists);
        // assertEq(j, k);

        // (bool notExists, uint256 l) = LibParseMeta.lookupIndexMetaExpander(meta, notFound);
        // assertTrue(!notExists);
        // assertEq(0, l);
    }
}
