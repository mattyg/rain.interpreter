//// SPDX-License-Identifier: CAL
pragma solidity ^0.8.18;

library LibBloom {
    /// Returns true if any of the words are duplicates according to a bloom filter.
    /// The bloom filter is a uint256, so the maximum number of words is 256
    /// but pragmatically there will be many false positives for random data
    /// due to the  birthday paradox. Regardless, if the inputs have little
    /// correlation, e.g. because they are generated by the fuzzer, and we don't
    /// need more than a few dozen words, this is a cheap and easy way to build
    /// a duplicate detector for test data.
    function bloomFindsDupes(bytes32[] memory words) internal pure returns (bool dupes) {
        assembly ("memory-safe") {
            let bloom := 0
            let cursor := add(words, 0x20)
            let end := add(cursor, mul(mload(words), 0x20))

            for { } lt(cursor, end) { cursor := add(cursor, 0x20) } {
                // Bloom filter is the mod of the word by the size of the bloom filter.
                // As the filter is a uint256, the length of the filter is 256 bits.
                let shifted := shl(mod(mload(cursor), 0x100), 0x1)
                if and(bloom, shifted) {
                    dupes := 1
                    break
                }
                bloom := or(bloom, shifted)
            }
        }
    }
}